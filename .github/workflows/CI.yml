name: CI

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        ruby:
          - '2.6'
          - '2.7'
          - '3.0'
          - '3.1'
          - '3.2'
          - '3.3'
          - '3.4'
        include:
          - os: macos-latest
            ruby: '3.4'
          - os: windows-latest
            ruby: '3.4'
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} Ruby ${{ matrix.ruby }}
    continue-on-error: ${{ matrix.ruby == 'head' }}
    steps:
      - uses: actions/checkout@v4

      # Linux deps
      - name: Install libcurl (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4 libcurl3-gnutls libcurl4-openssl-dev

      # macOS deps
      - name: Install libcurl (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install curl
          echo "$(brew --prefix curl)/bin" >> $GITHUB_PATH

      # Windows deps via MSYS2 (RubyInstaller DevKit)
      - name: Install libcurl (Windows)
        if: runner.os == 'Windows'
        run: |
          ridk exec pacman -S --noconfirm --needed mingw-w64-x86_64-curl

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true

      - name: Run tests
        run: bundle exec rake

  coverage:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4 libcurl3-gnutls libcurl4-openssl-dev lcov
      
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
      
      - name: Run tests with full coverage
        run: |
          # Clean any previous coverage
          bundle exec rake coverage_clean
          
          # Compile with coverage flags
          bundle exec rake compile_coverage
          
          # Run tests with Ruby coverage
          COVERAGE=1 bundle exec rake test
          
          # Generate C coverage report
          bundle exec rake coverage_report
      
      - name: Upload Ruby coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov/curb.lcov
          flags: ruby
          name: ruby-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Upload C coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage_c/coverage_filtered.info
          flags: c
          name: c-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Archive coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            coverage/
            coverage_c/
          retention-days: 30
